/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 17:17:08 GMT 2021
 */

package st;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import st.OptionMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionMap_ESTest extends OptionMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option(", shortcut=", (Integer) 4);
      OptionMap.Option optionMap_Option1 = optionMap0.new Option("A", (Integer) 4);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, (String) null, (Integer) 4);
      OptionMap.Option optionMap_Option1 = optionMap0.new Option(", sho^tOut=", (String) null, (Integer) optionMap0.STRING);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, (Integer) 1);
      OptionMap.Option optionMap_Option1 = optionMap0.new Option((String) null, (Integer) 2);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap optionMap1 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap1.new Option("`, type=", (Integer) 3);
      OptionMap.Option optionMap_Option1 = optionMap0.new Option("`, type=", "`, type=", (Integer) 1);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option(", shortcut=", (Integer) 4);
      boolean boolean0 = optionMap_Option0.equals(optionMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, (Integer) 2);
      boolean boolean0 = optionMap_Option0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, (Integer) 4);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("Ak", "Ak", 4);
      String string0 = optionMap0.toString();
      assertEquals("OptionMap [options=\n\t{name=Ak, shortcut=Ak, type=4, value=}\n]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("Ak", "Ak", 3225);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("Ak", "Ak", (-665));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("Ak", "h\u0002?2", 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("Ak", (String) null, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("4qkR\"3", "4qkR\"3", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store((String) null, (String) null, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("cdNX", "cdNX", 4);
      optionMap0.setValueWithOptioShortcut("OptionMap [options=\n\t{name=cdNX, shortcut=cdNX, type=4, value=}\n]", "OptionMap [options=\n\t{name=cdNX, shortcut=cdNX, type=4, value=}\n]");
      assertEquals(1, OptionMap.INTEGER);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("Ak", "Ak", 4);
      optionMap0.setValueWithOptioShortcut("Ak", "Ak");
      assertEquals(3, OptionMap.STRING);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("Ak", "Ak", 4);
      optionMap0.setValueWithOptionName("}\n", "}\n");
      assertEquals(1, OptionMap.INTEGER);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("Ask", "", 1);
      int int0 = optionMap0.getType("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("Ak", "Ak", 4);
      int int0 = optionMap0.getType("[a-zA-Z_][a-zA-Z0-9_]*");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("Ak", "Ak", 4);
      int int0 = optionMap0.getType("Ak");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("Ak", "Ak", 4);
      String string0 = optionMap0.getValue("x^");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("Ak", "Ak", 4);
      String string0 = optionMap0.getValue("Ak");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("k", "k", 4);
      optionMap0.store("k", "k", 2);
      assertEquals(1, OptionMap.INTEGER);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("", "", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("k", "w", 2);
      String string0 = optionMap0.getValue("w");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("", (Integer) 4);
      optionMap_Option0.setShortcut("");
      assertEquals(4, (int)optionMap_Option0.getType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("OptionMap [options=\n]", (Integer) 2);
      optionMap_Option0.setName("OptionMap [options=\n]");
      assertEquals("OptionMap [options=\n]", optionMap_Option0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("Ak", "Ak", 4);
      optionMap0.setValueWithOptionName("Ak", "Ak");
      assertEquals(4, OptionMap.CHAR);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("", "", (Integer) 4);
      optionMap_Option0.setType((Integer) 2);
      assertEquals(2, (int)optionMap_Option0.getType());
  }
}
