/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 16:42:40 GMT 2021
 */

package st;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import st.Parser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("dd", 1);
      parser0.parse("-FZ-G");
      List<Character> list0 = parser0.getCharacterList("dd");
      assertEquals(21, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.parse("\t{name=");
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("Bdg", 3);
      int int0 = parser0.parse("- OZ-G");
      assertEquals((-3), int0);
      
      int int1 = parser0.getInteger("Bdg");
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("s", "s", 2);
      assertEquals(1, Parser.INTEGER);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("djd9", 1);
      parser0.parse("-+,FRZ-.G");
      String string0 = parser0.getString("djd9");
      assertEquals("+,FRZ-.G", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("dd", 1);
      int int0 = parser0.parse("- Z-G");
      assertEquals((-3), int0);
      
      List<Character> list0 = parser0.getCharacterList("dd");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("Bdg", 3);
      parser0.parse("- OZ-OG");
      char char0 = parser0.getChar("Bdg");
      assertEquals('O', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("d", 1);
      parser0.parse("-`-G");
      // Undeclared exception!
      try { 
        parser0.getCharacterList("d");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.add("DagvL5Tus,w'", 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser parser0 = new Parser();
      char char0 = parser0.getChar("");
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("Bdg", 3);
      int int0 = parser0.parse("- OZ-OG");
      assertEquals(0, int0);
      
      boolean boolean0 = parser0.getBoolean("Bdg");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Parser parser0 = new Parser();
      String string0 = parser0.getString("fz-g");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("d", 1);
      parser0.parse("-FRZ-AG");
      List<Character> list0 = parser0.getCharacterList("d");
      assertEquals(29, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("dd", 1);
      parser0.parse("-F-e");
      List<Character> list0 = parser0.getCharacterList("dd");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("x", 3);
      parser0.parse("-COZ-Zc");
      List<Character> list0 = parser0.getCharacterList("x");
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("djd9", 1);
      parser0.parse("-+,FRZ-.G");
      List<Character> list0 = parser0.getCharacterList("djd9");
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Parser parser0 = new Parser();
      List<Character> list0 = parser0.getCharacterList("qNcN3Nr;");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.parse("-\"$`(0w)R");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.parse("-Gv'F-W");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.parse("-eFZ-D");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("-=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.parse("-SU9 ");
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.parse("-Gv7F_W");
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.parse("- -G");
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.parse("--F Z-G");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.parse(" ");
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.parse("");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.parse((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("Bdg", 3);
      int int0 = parser0.parse("- OZ-OG");
      assertEquals(0, int0);
      
      int int1 = parser0.getInteger("Bdg");
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("Bd", 2);
      int int0 = parser0.parse("- OZ-G");
      assertEquals((-3), int0);
      
      int int1 = parser0.getInteger("Bd");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("djglbd", 4);
      int int0 = parser0.getInteger("djglbd");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("Bdg", 3);
      int int0 = parser0.getInteger("Bdg");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("Bd", 2);
      int int0 = parser0.getInteger("Bd");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("dOQs", 1);
      int int0 = parser0.getInteger("dOQs");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.add("-n6bT'hP7", (String) null, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Parser parser0 = new Parser();
      int int0 = parser0.getInteger("-+,DRHs-JG");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Parser parser0 = new Parser();
      String string0 = parser0.toString();
      assertEquals("OptionMap [options=\n]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Parser parser0 = new Parser();
      boolean boolean0 = parser0.getBoolean(", value=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Parser parser0 = new Parser();
      parser0.add("djd9", 1);
      parser0.parse("-+,DRHs-JG");
      List<Character> list0 = parser0.getCharacterList("djd9");
      assertEquals(14, list0.size());
  }
}
